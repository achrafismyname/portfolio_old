{"version":3,"sources":["components/Window/TitleBar.js","components/Window/index.js","components/TestComponent.js","components/apps/Word.js","components/TaskBar/index.js","components/Desktop/index.js","app/App.js","app/serviceWorker.js","index.js"],"names":["TitleBar","props","titleBarStyle","background","bg","color","className","style","title","onClick","onMinimize","FontIcon","iconName","onExpand","onClose","Window","minimizeToggle","setState","minimized","state","expandToggle","expanded","closed","handle","this","children","Component","TestComponent","Word","index","id","placeholder","type","backgroundImage","App","closeApp","name","array","openedApps","indexOf","splice","minimizedApps","focusedApp","includes","bind","Boolean","window","location","hostname","match","initializeIcons","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qWAGe,SAASA,EAASC,GAE7B,IAAMC,EAAe,CACbC,WAAaF,EAAMG,GAAKH,EAAMG,GAAK,UACnCC,MAAQJ,EAAMI,MAAQJ,EAAMI,MAAQ,WAG5C,OACI,yBAAKC,UAAU,YAAYC,MAAOL,GAC9B,yBAAKI,UAAU,SACVL,EAAMO,OAEX,yBAAKF,UAAU,WACX,4BAAQG,QAASR,EAAMS,YACnB,kBAACC,EAAA,EAAD,CAAUC,SAAS,oBAEvB,4BAAQH,QAASR,EAAMY,UACnB,kBAACF,EAAA,EAAD,CAAUC,SAAS,mBAEvB,4BAAQN,UAAU,QAAQG,QAASR,EAAMa,SACrC,kBAACH,EAAA,EAAD,CAAUC,SAAS,kBAG3B,yBAAKN,UAAU,yB,UCrBNS,E,YACjB,aAAc,IAAD,8BACT,+CA2BJC,eAAiB,WACb,EAAKC,SAAS,CAACC,WAAY,EAAKC,MAAMD,aA7B7B,EA+BbE,aAAe,WACX,EAAKH,SAAS,CAACI,UAAW,EAAKF,MAAME,YA9BrC,EAAKF,MAAQ,CACTD,WAAW,EACXG,UAAU,EACVC,QAAQ,GALH,E,sEAST,OACI,kBAAC,IAAD,CACIC,OAAO,WAKP,yBAAKjB,UAAU,UACX,kBAACN,EAAD,CACIQ,MAAOgB,KAAKvB,MAAMO,MAClBE,WAAYc,KAAKR,eACjBH,SAAUW,KAAKJ,aACfN,QAASU,KAAKvB,MAAMa,UAEvBU,KAAKvB,MAAMwB,e,GAxBIC,aCHrB,SAASC,IACpB,OACI,8CCAO,SAASC,EAAK3B,GACzB,OACI,kBAAC,EAAD,CAAQO,MAAM,qBAAqBM,QAASb,EAAMa,SAC9C,kBAACa,EAAD,MADJ,U,UCFaE,E,iLAEb,OACI,yBAAKC,GAAG,YACJ,4BAAQxB,UAAU,SACd,kBAACK,EAAA,EAAD,CAAUC,SAAS,iBAEvB,yBAAKN,UAAU,kBACX,kBAACK,EAAA,EAAD,CAAUC,SAAS,eACnB,2BAAOmB,YAAY,sBAAsBC,KAAK,SAC9C,kBAACrB,EAAA,EAAD,CAAUC,SAAS,qB,GAVJc,aCDdG,G,uLAGb,OACI,yBAAKC,GAAG,UAAUvB,MAAO,CAAC0B,gBAAiB,8C,GAJpBP,cCEdQ,E,YACjB,aAAe,IAAD,8BACV,+CAgBJC,SAAW,SAACC,GACR,IAAIC,EAAK,YAAO,EAAKlB,MAAMmB,YACvBT,EAAQQ,EAAME,QAAQH,IACX,IAAXP,IACFQ,EAAMG,OAAOX,EAAO,GACpB,EAAKZ,SAAS,CAACqB,WAAYD,MApB7B,EAAKlB,MAAQ,CACTmB,WAAY,CAAC,QACbG,cAAe,GACfC,WAAY,QALN,E,sEASV,OACI,6BACI,kBAAC,EAAD,MACClB,KAAKL,MAAMmB,WAAWK,SAAS,QAAU,kBAACf,EAAD,CAAMd,QAASU,KAAKW,SAASS,KAAK,KAAM,UAAc,KAChG,kBAAC,EAAD,W,GAdiBlB,aCObmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,wBCVNC,cACAC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.c1149b1d.chunk.js","sourcesContent":["import React from 'react'\r\nimport { FontIcon } from 'office-ui-fabric-react/lib/Icon';\r\n\r\nexport default function TitleBar(props) {\r\n\r\n    const titleBarStyle= {\r\n            background: (props.bg ? props.bg : '#ffffff'),\r\n            color: (props.color ? props.color : '#000000')\r\n        };\r\n\r\n    return (\r\n        <div className='title-bar' style={titleBarStyle}>\r\n            <div className='title'>\r\n                {props.title}\r\n            </div>\r\n            <div className='buttons'>\r\n                <button onClick={props.onMinimize}>\r\n                    <FontIcon iconName=\"ChromeMinimize\" />\r\n                </button>\r\n                <button onClick={props.onExpand}>\r\n                    <FontIcon iconName=\"ChromeRestore\" />\r\n                </button>\r\n                <button className=\"close\" onClick={props.onClose}>\r\n                    <FontIcon iconName=\"ChromeClose\" />\r\n                </button>\r\n            </div>\r\n            <div className=\"handle drag-overlay\">\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { Component } from 'react'\r\nimport Draggable from 'react-draggable'\r\nimport TitleBar from './TitleBar'\r\nimport './index.scss' \r\n\r\nexport default class Window extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            minimized: false,\r\n            expanded: false,\r\n            closed: false\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <Draggable\r\n                handle=\".handle\"\r\n                // onStart={this.handleStart}\r\n                // onDrag={this.handleDrag}\r\n                // onStop={this.handleStop}\r\n                >\r\n                <div className=\"window\">\r\n                    <TitleBar \r\n                        title={this.props.title} \r\n                        onMinimize={this.minimizeToggle}\r\n                        onExpand={this.expandToggle}\r\n                        onClose={this.props.onClose}\r\n                    />\r\n                    {this.props.children}\r\n                </div>\r\n            </Draggable>\r\n        )\r\n    }\r\n    minimizeToggle = () => {\r\n        this.setState({minimized: !this.state.minimized})\r\n    }\r\n    expandToggle = () => {\r\n        this.setState({expanded: !this.state.expanded})\r\n    }\r\n}\r\n","import React from 'react'\r\n\r\nexport default function TestComponent() {\r\n    return (\r\n        <div>\r\n            TestComponent\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport Window from '../Window/'\r\nimport TestComponent from '../TestComponent'\r\n\r\nexport default function Word(props) {\r\n    return (\r\n        <Window title=\"Microsft word 2020\" onClose={props.onClose}>\r\n            <TestComponent />\r\n            looool\r\n        </Window>\r\n    )\r\n}\r\n","import React, { Component } from 'react'\r\nimport './index.scss'\r\nimport { FontIcon } from 'office-ui-fabric-react/lib/Icon';\r\n\r\nexport default class index extends Component {\r\n    render() {\r\n        return (\r\n            <div id=\"task-bar\">\r\n                <button className=\"start\">\r\n                    <FontIcon iconName=\"WindowsLogo\" />\r\n                </button>\r\n                <div className=\"cortana-search\">\r\n                    <FontIcon iconName=\"CircleRing\" />\r\n                    <input placeholder=\"Type here to search\" type=\"text\"/>\r\n                    <FontIcon iconName=\"Microphone\" />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport './index.scss'\r\n\r\nexport default class index extends Component {\r\n    render() {\r\n        let bgUrl = 'https://i.imgur.com/wqQXJGJ.jpg';\r\n        return (\r\n            <div id=\"desktop\" style={{backgroundImage: 'url('+bgUrl+')'}}>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport Word from '../components/apps/Word';\r\nimport TaskBar from '../components/TaskBar/';\r\nimport Desktop from '../components/Desktop/';\r\n\r\nexport default class App extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            openedApps: ['Word'],\r\n            minimizedApps: [],\r\n            focusedApp: 'Word'\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Desktop />\r\n                {this.state.openedApps.includes('Word') ? <Word onClose={this.closeApp.bind(null, 'Word')} /> : null}\r\n                <TaskBar />\r\n            </div>\r\n        )\r\n    }\r\n    closeApp = (name) => {\r\n        var array = [...this.state.openedApps];\r\n        var index = array.indexOf(name)\r\n        if (index !== -1) {\r\n          array.splice(index, 1);\r\n          this.setState({openedApps: array});\r\n        }\r\n    }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app/App';\nimport * as serviceWorker from './app/serviceWorker';\nimport './assets/styles/normalize.css';\nimport './assets/styles/global.scss';\nimport { initializeIcons } from '@uifabric/icons';\n\ninitializeIcons();\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}